import math

from env import graph_env
import QAgent

# Numpy
import numpy as np

import matplotlib.pyplot as plt


def distance(agent1, agent2, observations):
    """
    Returns the distance between two agents in a given observation
    :param agent1: String representation of agent1
    :param agent2: String representation of agent2
    :param observations: Dictionary of observations
    :return: distance
    """
    return np.sqrt((observations[agent1]['x'] - observations[agent2]['x']) ** 2 + (
            observations[agent1]['y'] - observations[agent2]['y']) ** 2)


# This function is the same as in https://github.com/kinimesi/cytoscape.js-marll/blob/master/cytoscape-marll.js with minor tweaks
def calcDegree(node, center):
    return math.atan2(node['y'] - center['y'], node['x'] - center['x'])


# This function is the same as in https://github.com/kinimesi/cytoscape.js-marll/blob/master/cytoscape-marll.js with minor tweaks
def calcAngle(node1, center, node2):
    n1dy = node1['y'] - center['y']
    n1dx = node1['x'] - node1['x']
    n2dy = node2['y'] - center['y']
    n2dx = node2['x'] - center['x']
    n1a = math.atan2(n1dy, n1dx)
    n2a = math.atan2(n2dy, n2dx)

    da = abs(n1a - n2a)
    da = da if da < math.pi else 2 * math.pi - da

    return da


def angleVariance(target_agent, action, observations):
    """
    Computes the variance of angles compared to their ideal values
    :param target_agent: Agent to compute the angles of
    :param action: Action that agent will take, angles are computed after this action
    :param observations: Observations about the state space
    :return: Variance of the angles, normalized by the number of neighbors
    """
    next_x, next_y = takeStep(target_agent, action, observations)
    next_agent = {'x': next_x, 'y': next_y}
    neighbors = sorted(findConnectedNodes(target_agent, observations),
                       key=lambda x: calcDegree(observations[x], next_agent))

    length = len(neighbors)
    variance = 0
    for i in range(length - 1):
        variance += (abs(calcAngle(observations[neighbors[i]], next_agent,
                                   observations[neighbors[i + 1]])) - 2 * math.pi / length) ** 2
    return variance / len(neighbors)


def partition_circle_act(target_agent, action, observations, env, r, partitions):
    """
    This returns a vector that represents whether an agent is within radius r of the target agent.
    If it is within the radius, then the vector represents the count that corresponds to each partition.
    Ex: (1, 0, 2, 1) means 1 object is within radius r and in first quadrant, 0 objects in second quadrant...
    :param target_agent: target agent centered around
    :param action: the action that the target agent will take
    :param observations: observations for a given step
    :param env: current environment
    :param r: radius of the circle
    :param partitions: number of partitions
    :return: vector of counts
    """
    # Do the action step!
    # Process each agent's action
    next_x, next_y = takeStep(target_agent, action, observations)

    vec_counts = np.zeros(partitions)

    for agent in env.agents:
        if agent != target_agent:
            agent_x = observations[agent]['x']
            agent_y = observations[agent]['y']
            # Note: Code below generated by chatgpt then checked and modified by me
            # Convert Cartesian coordinates to polar coordinates
            radius, theta = distance(target_agent, agent, observations), np.arctan2((agent_y - next_y),
                                                                                    (agent_x - next_x))

            # Normalize theta to be in the range [0, 2*pi)
            theta = (theta + 2 * np.pi) % (2 * np.pi)
            # Calculate the sector size for six partitions
            sector_size = 2 * np.pi / partitions

            # Determine the partition index
            partition_index = np.floor(theta / sector_size).astype(int)

            # Only add if within distance
            if radius <= r:
                vec_counts[partition_index] += 1
    return vec_counts


def distToKNearestNeighborsWithEdgeLength(target_agent, action, observations, env, k, idealEdgeLength):
    """
    Returns the distance between two agents in a given observation
    :param target_agent: String representation of target_agent
    :param action: action taken by the target agent
    :param observations: observations of the state
    :param env: environment of graph
    :param k: number of neighbors
    :return: distance as a vector, with the first being the closest
    """

    next_x, next_y = takeStep(target_agent, action, observations)

    dist_dict = {}
    for agent in env.agents:
        if agent != target_agent:
            dist_dict[agent] = ((np.sqrt((next_x - observations[agent]['x']) ** 2 +
                                         (next_y - observations[agent]['y']) ** 2)) - idealEdgeLength) ** 2

    if k > 1:
        dists = np.sort(np.fromiter(dist_dict.values(), dtype=float))
        return dists[:k]
    else:
        dists = np.fromiter(dist_dict.values(), dtype=float)
        return dists[0]


def distToFarthestConnectedNode(target_agent, action, observations, env, idealEdgeLength):
    """
    Returns the distance between two agents in a given observation
    :param target_agent: String representation of target_agent
    :param action: action taken by the target agent
    :param observations: observations of the state
    :param env: environment of graph
    :return: distance as a vector, with the first being the closest
    """

    next_x, next_y = takeStep(target_agent, action, observations)

    connectedNodes = findConnectedNodes(target_agent, observations)
    largest_dist = 0
    for agent in env.agents:
        if agent != target_agent and agent in connectedNodes:
            dist = abs(
                np.sqrt((next_x - observations[agent]['x']) ** 2 + (next_y - observations[agent]['y']) ** 2)
                - idealEdgeLength)
            if dist > largest_dist:
                largest_dist = dist
    return largest_dist


def distToClosestConnectedNode(target_agent, action, observations, env, idealEdgeLength):
    """
    Returns the distance between two agents in a given observation
    :param target_agent: String representation of target_agent
    :param action: action taken by the target agent
    :param observations: observations of the state
    :param env: environment of graph
    :return: distance as a vector, with the first being the closest
    """

    next_x, next_y = takeStep(target_agent, action, observations)

    connectedNodes = findConnectedNodes(target_agent, observations)
    smallest_dist = math.inf
    for agent in env.agents:
        if agent != target_agent and agent in connectedNodes:
            dist = abs(
                np.sqrt((next_x - observations[agent]['x']) ** 2 + (next_y - observations[agent]['y']) ** 2)
                - idealEdgeLength)
            if dist < smallest_dist:
                smallest_dist = dist
    return smallest_dist


def closestUnconnectedNode(target_agent, action, observations, env):
    next_x, next_y = takeStep(target_agent, action, observations)

    connectedNodes = findConnectedNodes(target_agent, observations)
    unconnectedNodes = list(set(env.agents) - set(connectedNodes))

    smallest_dist = math.inf
    for agent in unconnectedNodes:
        dist = np.sqrt((next_x - observations[agent]['x']) ** 2 + (next_y - observations[agent]['y']) ** 2)
        if dist < smallest_dist:
            smallest_dist = dist
    return smallest_dist


def distanceToAllUnconnectedNodesWithinBall(target_agent, action, observations, env, radius):
    next_x, next_y = takeStep(target_agent, action, observations)

    connectedNodes = findConnectedNodes(target_agent, observations)
    unconnectedNodes = list(set(env.agents) - set(connectedNodes))

    totalDist = 0
    for agent in unconnectedNodes:
        dist = np.sqrt((next_x - observations[agent]['x']) ** 2 + (next_y - observations[agent]['y']) ** 2)
        if (dist < radius):
            totalDist += dist
    return totalDist


def distanceToAllUnconnected(target_agent, action, observations, env):
    """
    Compute the distance to all nodes in a graph that aren't connected,
    normalized by the number of nodes
    :param target_agent: Agent that all distances are computed from
    :param action: Action that agent will take, distances are computed after taking this action
    :param observations: Observations about the global state space
    :param env: graph environment
    :return: The sum distance to all nodes, normalized
    """
    next_x, next_y = takeStep(target_agent, action, observations)

    connectedNodes = findConnectedNodes(target_agent, observations)
    unconnectedNodes = list((set(env.agents) - set(connectedNodes)) - set([target_agent]))

    totalDist = 0
    for agent in unconnectedNodes:
        dist = np.sqrt((next_x - observations[agent]['x']) ** 2 + (next_y - observations[agent]['y']) ** 2)
        totalDist += dist
    totalDist = totalDist / len(env.agents)
    return totalDist


def inverseSquareDistanceToAllUnconnected(target_agent, action, observations, env, repulsion_constant):
    """
    Compute inverse square of distance to all nodes in a graph that aren't connected,
    normalized by the number of nodes
    :param target_agent: Agent that all distances are computed from
    :param action: Action that agent will take, distances are computed after taking this action
    :param observations: Observations about the global state space
    :param env: graph environment
    :param repulsion_constant: Repulsion constant used to make inverse square function a little bigger
    :return: The inverse square of distance to all nodes, normalized
    """
    next_x, next_y = takeStep(target_agent, action, observations)

    connectedNodes = findConnectedNodes(target_agent, observations)
    unconnectedNodes = list((set(env.agents) - set(connectedNodes)) - set([target_agent]))

    totalDist = 0
    for agent in unconnectedNodes:
        dist = (next_x - observations[agent]['x']) ** 2 + (next_y - observations[agent]['y']) ** 2
        inverse_square = repulsion_constant / dist
        totalDist += inverse_square
    totalDist = totalDist / len(env.agents)
    return totalDist


def edgeVariance(target_agent, action, observations, idealEdgeLength):
    """
    Computes how different the edges of a node are from their ideal length
    :param target_agent: Agent with edges that we are concerned with
    :param action: Action that agent will take, edge variance computed after this action
    :param observations: Observations about the global state space
    :param idealEdgeLength: Ideal Edge Length of the graph
    :return: Variance of the edges, normalized with respect to neighbors
    """
    next_x, next_y = takeStep(target_agent, action, observations)

    neighbors = findConnectedNodes(target_agent, observations)

    variance = 0
    for agent in neighbors:
        dist = np.sqrt((next_x - observations[agent]['x']) ** 2 + (next_y - observations[agent]['y']) ** 2)

        variance += (dist - idealEdgeLength) ** 2
    variance = variance / len(neighbors)
    return variance


# Come from https://github.com/kinimesi/cytoscape.js-marll/blob/master/cytoscape-marll.js
def numberOfEdgeCrossings(target_agent, action, observations, env):
    crosses = 0

    next_x, next_y = takeStep(target_agent, action, observations)

    edges = env.edges

    for edge1 in edges:
        agent1 = observations[edge1['source']]
        agent2 = observations[edge1['target']]
        for edge2 in edges:
            if not edge1 == edge2:
                agent3 = observations[edge2['source']]
                agent4 = observations[edge2['target']]
                if doesIntersect(agent1, agent2, agent3, agent4):
                    crosses += 1
    return crosses

# Come from https://github.com/kinimesi/cytoscape.js-marll/blob/master/cytoscape-marll.js
def doesIntersect(agent1, agent2, agent3, agent4):
    det = (agent2['x'] - agent1['x']) * (agent4['y'] - agent3['y']) - (agent4['x'] - agent3['x']) * (
            agent2['y'] - agent1['y'])
    if det == 0:
        return False
    else:
        lam = ((agent4['y'] - agent3['y']) * (agent4['x'] - agent1['x']) + (agent3['x'] - agent4['x']) * (
                agent4['y'] - agent1['y'])) / det
        gam = ((agent1['y'] - agent2['y']) * (agent4['x'] - agent1['x']) + (agent2['x'] - agent1['x']) * (
                agent4['y'] - agent1['y'])) / det
        return 0.01 < lam < 0.99 and 0.1 < gam < 0.99


def biasFunc():
    return 1


def findConnectedNodes(target_agent, observations):
    """
    Finds the names of all nodes connected to a node
    :param target_agent: target node
    :param observations: observations of the state space
    :return: list of node names
    """
    edges = observations[target_agent]['edges']
    connectedNodes = []
    for edge in edges:
        if edge['source'] == target_agent:
            connectedNodes.append(edge['target'])
        else:
            connectedNodes.append(edge['source'])
    return connectedNodes


def getOverallForces(observations):
    sumOfForces = 0
    for agent in observations.keys():
        # print(agent, observations[agent]['forces'])
        sumOfForces += observations[agent]['forces']
    return sumOfForces


def takeStep(target_agent, action, observations):
    displacement = [[-1, -1], [0, -1], [1, -1], [-1, 0], [0, 0], [1, 0], [-1, 1], [0, 1], [1, 1]]
    num_iters = observations[target_agent]["num_iters"]
    max_iters = observations[target_agent]["max_iters"]
    delta = 9*(1-(num_iters/max_iters)) + 1
    next_x = observations[target_agent]["x"] + displacement[action][0] * delta
    next_y = observations[target_agent]["y"] + displacement[action][1] * delta
    return next_x, next_y


env = graph_env.parallel_env(render_mode="")
# options={"elements": {"nodes": [
#     {"data": {"id": '1'}},
#     {"data": {"id": '0'}},
#     {"data": {"id": '2'}}
# ], "edges": [
#     {"data": {"source": '0', "target": '1', "directed": 'False'}},
#     {"data": {"source": '1', "target": '2', "directed": 'False'}}
# ]},
#     "randomInit": True,
# }
# options = {"elements": {
#     "nodes": [
#         {"data": {"id": 'v1'}},
#         {"data": {"id": 'v2'}},
#         {"data": {"id": 'v3'}},
#         {"data": {"id": 'v4'}},
#         {"data": {"id": 'v5'}},
#         {"data": {"id": 'v6'}},
#         {"data": {"id": 'v0'}}
#     ],
#     "edges": [
#         {"data": {"source": 'v0', "target": 'v1'}},
#         {"data": {"source": 'v0', "target": 'v2'}},
#         {"data": {"source": 'v0', "target": 'v3'}},
#         {"data": {"source": 'v1', "target": 'v4'}},
#         {"data": {"source": 'v2', "target": 'v5'}},
#         {"data": {"source": 'v3', "target": 'v6'}},
#     ]
# }, "randomInit": True}
# options = {"elements": {
#     "nodes": [
#         {"data": {"id": 'n1'}},
#         {"data": {"id": 'n2'}},
#         {"data": {"id": 'n3'}},
#         {"data": {"id": 'n4'}},
#         {"data": {"id": 'n5'}},
#         {"data": {"id": 'n6'}},
#         {"data": {"id": 'n7'}},
#         {"data": {"id": 'n8'}}
#     ],
#     "edges": [
#         {"data": {"source": 'n1', "target": 'n4'}},
#         {"data": {"source": 'n2', "target": 'n4'}},
#         {"data": {"source": 'n3', "target": 'n4'}},
#         {"data": {"source": 'n4', "target": 'n5'}},
#         {"data": {"source": 'n5', "target": 'n6'}},
#         {"data": {"source": 'n5', "target": 'n7'}},
#         {"data": {"source": 'n6', "target": 'n8'}},
#         {"data": {"source": 'n7', "target": 'n8'}},
#     ]
# }, "randomInit": True}

options = {"elements": {
    "nodes": [
        {"data": {"id": "glyph9",
                  "sbgnbbox": {"x": 1452.639173965406, "y": 609.3619416544145, "w": "120.0", "h": "60.0"},
                  "sbgnclass": "macromolecule", "sbgnlabel": "hexokinase", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 1452.639173965406, "y": 609.3619416544145}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph0",
                  "sbgnbbox": {"x": 1351.3490293961959, "y": 518.9529901384763, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "glucose", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 1351.3490293961959, "y": 518.9529901384763}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph6",
                  "sbgnbbox": {"x": 1358.2854747390154, "y": 707.9866590968695, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "ATP", "sbgnstatesandinfos": [], "sbgnclonemarker": True,
                  "ports": []}, "position": {"x": 1358.2854747390154, "y": 707.9866590968695}, "group": "nodes",
         "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True,
         "classes": ""},
        {"data": {"id": "glyph8",
                  "sbgnbbox": {"x": 1322.9939787691299, "y": 614.6878118623499, "w": "20.0", "h": "20.0"},
                  "sbgnclass": "process", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 1322.9939787691299, "y": 614.6878118623499}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph7",
                  "sbgnbbox": {"x": 1239.4852011317887, "y": 543.2369849876238, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "ADP", "sbgnstatesandinfos": [], "sbgnclonemarker": True,
                  "ports": []}, "position": {"x": 1239.4852011317887, "y": 543.2369849876238}, "group": "nodes",
         "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True,
         "classes": ""},
        {"data": {"id": "glyph12",
                  "sbgnbbox": {"x": 841.6855140740067, "y": 765.0152660242113, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "ADP", "sbgnstatesandinfos": [], "sbgnclonemarker": True,
                  "ports": []}, "position": {"x": 841.6855140740067, "y": 765.0152660242113}, "group": "nodes",
         "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True,
         "classes": ""},
        {"data": {"id": "glyph13",
                  "sbgnbbox": {"x": 1019.5908382748769, "y": 841.6087025848726, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "ATP", "sbgnstatesandinfos": [], "sbgnclonemarker": True,
                  "ports": []}, "position": {"x": 1019.5908382748769, "y": 841.6087025848726}, "group": "nodes",
         "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True,
         "classes": ""},
        {"data": {"id": "glyph1",
                  "sbgnbbox": {"x": 1231.2768042260652, "y": 673.2683218469676, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "glucose 6P", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 1231.2768042260652, "y": 673.2683218469676}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph2",
                  "sbgnbbox": {"x": 1039.8995038336504, "y": 730.180116446269, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "fructose 6P", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 1039.8995038336504, "y": 730.180116446269}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph15",
                  "sbgnbbox": {"x": 569.5498472077387, "y": 506.89980858075364, "w": "120.0", "h": "60.0"},
                  "sbgnclass": "macromolecule", "sbgnlabel": "triose-P isomerase", "sbgnstatesandinfos": [],
                  "ports": []}, "position": {"x": 569.5498472077387, "y": 506.89980858075364}, "group": "nodes",
         "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True,
         "classes": ""},
        {"data": {"id": "glyph3",
                  "sbgnbbox": {"x": 903.0347368937041, "y": 654.3308627056822, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "fructose 1,6P", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 903.0347368937041, "y": 654.3308627056822}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph17",
                  "sbgnbbox": {"x": 1195.6310733031135, "y": 820.9504141631944, "w": "120.0", "h": "60.0"},
                  "sbgnclass": "macromolecule", "sbgnlabel": "glucose-6P isomerase", "sbgnstatesandinfos": [],
                  "ports": []}, "position": {"x": 1195.6310733031135, "y": 820.9504141631944}, "group": "nodes",
         "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True,
         "classes": ""},
        {"data": {"id": "glyph10",
                  "sbgnbbox": {"x": 1141.2404374322139, "y": 732.3190922346248, "w": "20.0", "h": "20.0"},
                  "sbgnclass": "process", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 1141.2404374322139, "y": 732.3190922346248}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph19",
                  "sbgnbbox": {"x": 893.1427762830865, "y": 856.2695126662625, "w": "120.0", "h": "60.0"},
                  "sbgnclass": "macromolecule", "sbgnlabel": "phospho fructokinase", "sbgnstatesandinfos": [],
                  "ports": []}, "position": {"x": 893.1427762830865, "y": 856.2695126662625}, "group": "nodes",
         "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True,
         "classes": ""},
        {"data": {"id": "glyph11",
                  "sbgnbbox": {"x": 939.3335184518824, "y": 758.3699048922733, "w": "20.0", "h": "20.0"},
                  "sbgnclass": "process", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 939.3335184518824, "y": 758.3699048922733}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph18",
                  "sbgnbbox": {"x": 770.4114528170364, "y": 659.2220219290564, "w": "120.0", "h": "60.0"},
                  "sbgnclass": "macromolecule", "sbgnlabel": "adolase", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 770.4114528170364, "y": 659.2220219290564}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph16",
                  "sbgnbbox": {"x": 818.0111009023315, "y": 564.8072603606723, "w": "20.0", "h": "20.0"},
                  "sbgnclass": "process", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 818.0111009023315, "y": 564.8072603606723}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph22",
                  "sbgnbbox": {"x": 651.1292498357636, "y": 314.1387423188818, "w": "120.0", "h": "60.0"},
                  "sbgnclass": "macromolecule", "sbgnlabel": "GAPDH", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 651.1292498357636, "y": 314.1387423188818}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph4",
                  "sbgnbbox": {"x": 792.0076145303351, "y": 454.0225025614517, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "GA-3P", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 792.0076145303351, "y": 454.0225025614517}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph23",
                  "sbgnbbox": {"x": 704.0937009722281, "y": 398.0421081673902, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "Pi", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 704.0937009722281, "y": 398.0421081673902}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph24",
                  "sbgnbbox": {"x": 809.2974819306742, "y": 231.7141323534711, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "NAD", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 809.2974819306742, "y": 231.7141323534711}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph25",
                  "sbgnbbox": {"x": 890.826951363933, "y": 299.74915938409947, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "H+", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 890.826951363933, "y": 299.74915938409947}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph20",
                  "sbgnbbox": {"x": 786.2625869125006, "y": 331.67766378118495, "w": "20.0", "h": "20.0"},
                  "sbgnclass": "process", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 786.2625869125006, "y": 331.67766378118495}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph26",
                  "sbgnbbox": {"x": 879.2981049664311, "y": 389.27232563593486, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "NADH", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 879.2981049664311, "y": 389.27232563593486}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph35",
                  "sbgnbbox": {"x": 627.088268638501, "y": 40.089848876876886, "w": "120.0", "h": "60.0"},
                  "sbgnclass": "macromolecule", "sbgnlabel": "PGK1", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 627.088268638501, "y": 40.089848876876886}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph36",
                  "sbgnbbox": {"x": 329.6761506918384, "y": 187.20503497360494, "w": "120.0", "h": "60.0"},
                  "sbgnclass": "macromolecule", "sbgnlabel": "PG mutase", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 329.6761506918384, "y": 187.20503497360494}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph37",
                  "sbgnbbox": {"x": 155.12947729633356, "y": 379.5263531900425, "w": "120.0", "h": "60.0"},
                  "sbgnclass": "macromolecule", "sbgnlabel": "enolase", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 155.12947729633356, "y": 379.5263531900425}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph38",
                  "sbgnbbox": {"x": 70.13952165372024, "y": 581.2691021233562, "w": "120.0", "h": "60.0"},
                  "sbgnclass": "macromolecule", "sbgnlabel": "pyruvate kinase", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 70.13952165372024, "y": 581.2691021233562}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph21",
                  "sbgnbbox": {"x": 713.4639263718316, "y": 229.06355211274115, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "1,3 BPG", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 713.4639263718316, "y": 229.06355211274115}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph42",
                  "sbgnbbox": {"x": 523.848994074475, "y": 108.47701882803744, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "ADP", "sbgnstatesandinfos": [], "sbgnclonemarker": True,
                  "ports": []}, "position": {"x": 523.848994074475, "y": 108.47701882803744}, "group": "nodes",
         "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True,
         "classes": ""},
        {"data": {"id": "glyph41",
                  "sbgnbbox": {"x": 718.966532806447, "y": 116.46683749236911, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "ATP", "sbgnstatesandinfos": [], "sbgnclonemarker": True,
                  "ports": []}, "position": {"x": 718.966532806447, "y": 116.46683749236911}, "group": "nodes",
         "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True,
         "classes": ""},
        {"data": {"id": "glyph31",
                  "sbgnbbox": {"x": 621.3138039842713, "y": 145.7168752444793, "w": "20.0", "h": "20.0"},
                  "sbgnclass": "process", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 621.3138039842713, "y": 145.7168752444793}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph27",
                  "sbgnbbox": {"x": 525.2099120385327, "y": 210.92542274858295, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "3 PG", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 525.2099120385327, "y": 210.92542274858295}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph32",
                  "sbgnbbox": {"x": 426.3492127437995, "y": 257.85665030680025, "w": "20.0", "h": "20.0"},
                  "sbgnclass": "process", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 426.3492127437995, "y": 257.85665030680025}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph28",
                  "sbgnbbox": {"x": 346.30926488002945, "y": 344.4562152937847, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "2 PG", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 346.30926488002945, "y": 344.4562152937847}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph43",
                  "sbgnbbox": {"x": 363.54724181648487, "y": 486.5705174517715, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "H2O", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 363.54724181648487, "y": 486.5705174517715}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph33",
                  "sbgnbbox": {"x": 276.2797233955059, "y": 435.0423711483709, "w": "20.0", "h": "20.0"},
                  "sbgnclass": "process", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 269.87972487503066, "y": 430.2423722580144}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph29",
                  "sbgnbbox": {"x": 227.86139816113416, "y": 531.824141876398, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "PEP", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 227.86139816113416, "y": 531.824141876398}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph39",
                  "sbgnbbox": {"x": 104.77693104995387, "y": 691.8382969303054, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "ADP", "sbgnstatesandinfos": [], "sbgnclonemarker": True,
                  "ports": []}, "position": {"x": 104.77693104995387, "y": 691.8382969303054}, "group": "nodes",
         "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True,
         "classes": ""},
        {"data": {"id": "glyph40",
                  "sbgnbbox": {"x": 292.039416141131, "y": 643.4009391289965, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "ATP", "sbgnstatesandinfos": [], "sbgnclonemarker": True,
                  "ports": []}, "position": {"x": 292.039416141131, "y": 643.4009391289965}, "group": "nodes",
         "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True,
         "classes": ""},
        {"data": {"id": "glyph34",
                  "sbgnbbox": {"x": 193.8304385062596, "y": 632.9540034207419, "w": "20.0", "h": "20.0"},
                  "sbgnclass": "process", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 193.8304385062596, "y": 632.9540034207419}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph30",
                  "sbgnbbox": {"x": 205.4745704273754, "y": 733.5181650652648, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "pyruvate", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 205.4745704273754, "y": 733.5181650652648}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph14",
                  "sbgnbbox": {"x": 695.1248473196924, "y": 482.8828321494848, "w": "20.0", "h": "20.0"},
                  "sbgnclass": "process", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 695.1248473196924, "y": 482.8828321494848}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "glyph5",
                  "sbgnbbox": {"x": 721.6687687330186, "y": 570.3868893775194, "w": "60.0", "h": "60.0"},
                  "sbgnclass": "simple chemical", "sbgnlabel": "DHA-P", "sbgnstatesandinfos": [], "ports": []},
         "position": {"x": 721.6687687330186, "y": 570.3868893775194}, "group": "nodes", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
    ],
    "edges": [
        {"data": {"id": "e22", "sbgnclass": "catalysis", "sbgncardinality": 0, "source": "glyph9", "target": "glyph8",
                  "portsource": "glyph9", "porttarget": "glyph8"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e23", "sbgnclass": "consumption", "sbgncardinality": 0, "source": "glyph0", "target": "glyph8",
                  "portsource": "glyph0", "porttarget": "glyph8"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e24", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph8", "target": "glyph1",
                  "portsource": "glyph8", "porttarget": "glyph1"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e25", "sbgnclass": "consumption", "sbgncardinality": 0, "source": "glyph6", "target": "glyph8",
                  "portsource": "glyph6", "porttarget": "glyph8"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e26", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph8", "target": "glyph7",
                  "portsource": "glyph8", "porttarget": "glyph7"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e27", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph11",
                  "target": "glyph12", "portsource": "glyph11", "porttarget": "glyph12"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e28", "sbgnclass": "consumption", "sbgncardinality": 0, "source": "glyph13",
                  "target": "glyph11", "portsource": "glyph13", "porttarget": "glyph11"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e29", "sbgnclass": "consumption", "sbgncardinality": 0, "source": "glyph1",
                  "target": "glyph10", "portsource": "glyph1", "porttarget": "glyph10"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e30", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph10", "target": "glyph2",
                  "portsource": "glyph10", "porttarget": "glyph2"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e31", "sbgnclass": "consumption", "sbgncardinality": 0, "source": "glyph2",
                  "target": "glyph11", "portsource": "glyph2", "porttarget": "glyph11"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e32", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph11", "target": "glyph3",
                  "portsource": "glyph11", "porttarget": "glyph3"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e33", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph14", "target": "glyph4",
                  "portsource": "glyph14", "porttarget": "glyph4"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e34", "sbgnclass": "catalysis", "sbgncardinality": 0, "source": "glyph15", "target": "glyph14",
                  "portsource": "glyph15", "porttarget": "glyph14"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e35", "sbgnclass": "consumption", "sbgncardinality": 0, "source": "glyph3",
                  "target": "glyph16", "portsource": "glyph3", "porttarget": "glyph16"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e36", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph16", "target": "glyph5",
                  "portsource": "glyph16", "porttarget": "glyph5"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e37", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph16", "target": "glyph4",
                  "portsource": "glyph16", "porttarget": "glyph4"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e38", "sbgnclass": "catalysis", "sbgncardinality": 0, "source": "glyph17", "target": "glyph10",
                  "portsource": "glyph17", "porttarget": "glyph10"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e39", "sbgnclass": "catalysis", "sbgncardinality": 0, "source": "glyph19", "target": "glyph11",
                  "portsource": "glyph19", "porttarget": "glyph11"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e40", "sbgnclass": "catalysis", "sbgncardinality": 0, "source": "glyph18", "target": "glyph16",
                  "portsource": "glyph18", "porttarget": "glyph16"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e41", "sbgnclass": "catalysis", "sbgncardinality": 0, "source": "glyph22", "target": "glyph20",
                  "portsource": "glyph22", "porttarget": "glyph20"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e42", "sbgnclass": "consumption", "sbgncardinality": 0, "source": "glyph4",
                  "target": "glyph20", "portsource": "glyph4", "porttarget": "glyph20"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e43", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph20",
                  "target": "glyph21", "portsource": "glyph20", "porttarget": "glyph21"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e44", "sbgnclass": "consumption", "sbgncardinality": 0, "source": "glyph23",
                  "target": "glyph20", "portsource": "glyph23", "porttarget": "glyph20"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e45", "sbgnclass": "consumption", "sbgncardinality": 0, "source": "glyph24",
                  "target": "glyph20", "portsource": "glyph24", "porttarget": "glyph20"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e46", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph20",
                  "target": "glyph25", "portsource": "glyph20", "porttarget": "glyph25"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e47", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph20",
                  "target": "glyph26", "portsource": "glyph20", "porttarget": "glyph26"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e48", "sbgnclass": "catalysis", "sbgncardinality": 0, "source": "glyph35", "target": "glyph31",
                  "portsource": "glyph35", "porttarget": "glyph31"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e49", "sbgnclass": "catalysis", "sbgncardinality": 0, "source": "glyph36", "target": "glyph32",
                  "portsource": "glyph36", "porttarget": "glyph32"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e50", "sbgnclass": "catalysis", "sbgncardinality": 0, "source": "glyph37", "target": "glyph33",
                  "portsource": "glyph37", "porttarget": "glyph33"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e51", "sbgnclass": "catalysis", "sbgncardinality": 0, "source": "glyph38", "target": "glyph34",
                  "portsource": "glyph38", "porttarget": "glyph34"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e52", "sbgnclass": "consumption", "sbgncardinality": 0, "source": "glyph21",
                  "target": "glyph31", "portsource": "glyph21", "porttarget": "glyph31"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e53", "sbgnclass": "consumption", "sbgncardinality": 0, "source": "glyph42",
                  "target": "glyph31", "portsource": "glyph42", "porttarget": "glyph31"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e54", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph31",
                  "target": "glyph41", "portsource": "glyph31", "porttarget": "glyph41"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e55", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph31",
                  "target": "glyph27", "portsource": "glyph31", "porttarget": "glyph27"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e56", "sbgnclass": "consumption", "sbgncardinality": 0, "source": "glyph27",
                  "target": "glyph32", "portsource": "glyph27", "porttarget": "glyph32"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e57", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph32",
                  "target": "glyph28", "portsource": "glyph32", "porttarget": "glyph28"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e58", "sbgnclass": "consumption", "sbgncardinality": 0, "source": "glyph28",
                  "target": "glyph33", "portsource": "glyph28", "porttarget": "glyph33"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e59", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph33",
                  "target": "glyph43", "portsource": "glyph33", "porttarget": "glyph43"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e60", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph33",
                  "target": "glyph29", "portsource": "glyph33", "porttarget": "glyph29"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e61", "sbgnclass": "consumption", "sbgncardinality": 0, "source": "glyph29",
                  "target": "glyph34", "portsource": "glyph29", "porttarget": "glyph34"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e62", "sbgnclass": "consumption", "sbgncardinality": 0, "source": "glyph39",
                  "target": "glyph34", "portsource": "glyph39", "porttarget": "glyph34"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e63", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph34",
                  "target": "glyph40", "portsource": "glyph34", "porttarget": "glyph40"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e64", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph34",
                  "target": "glyph30", "portsource": "glyph34", "porttarget": "glyph30"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e65", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph14", "target": "glyph5",
                  "portsource": "glyph14", "porttarget": "glyph5"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e66", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph33",
                  "target": "glyph35", "portsource": "glyph33", "porttarget": "glyph35"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e67", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph13",
                  "target": "glyph22", "portsource": "glyph13", "porttarget": "glyph22"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""},
        {"data": {"id": "e68", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph17", "target": "glyph6",
                  "portsource": "glyph17", "porttarget": "glyph6"}, "position": {}, "group": "edges", "removed": False,
         "selected": False, "selectable": True, "locked": False, "grabbed": False, "grabbable": True, "classes": ""},
        {"data": {"id": "e69", "sbgnclass": "production", "sbgncardinality": 0, "source": "glyph25",
                  "target": "glyph27", "portsource": "glyph25", "porttarget": "glyph27"}, "position": {},
         "group": "edges", "removed": False, "selected": False, "selectable": True, "locked": False, "grabbed": False,
         "grabbable": True, "classes": ""}
    ]}, "randomInit": True}

observations, infos = env.reset(options=options)

# Create an agent
learner = QAgent.QLearningAgent(env=env, epsilon=0.05, gamma=0.8, alpha=0.00003,
                                weights=np.zeros(7),
                                # [-4.97775705, 1.27415361, 0.24966353, 23.9207037, -19.98592583, 4.61179327, 8.13939487],
                                features=[angleVariance, edgeVariance,
                                          inverseSquareDistanceToAllUnconnected, closestUnconnectedNode,
                                          distToFarthestConnectedNode, distToClosestConnectedNode, biasFunc])

NUM_ROLLOUTS = 13
finalSumForces = []
for rollout in range(NUM_ROLLOUTS):
    observations, infos = env.reset(options=options)
    while env.agents:
        states = {agent: {'agent': agent, 'observations': observations, 'env': env} for agent in env.agents}
        # actions = {agent: env.action_space(agent).sample() for agent in env.agents}
        actions = {agent: learner.getAction(states[agent]) for agent in env.agents}
        observations, rewards, terminations, truncations, infos = env.step(actions)
        # print(rewards)
        # print("Action:", actions)
        # print(observations)
        # print(env)
        # print(learner.getWeights())
        nextStates = {agent: {'agent': agent, 'observations': observations, 'env': env} for agent in env.agents}
        for agent in env.agents:
            learner.update(states[agent], actions[agent], nextStates[agent], rewards[agent])
            # pass
    finalSumForces.append(getOverallForces(observations))
    # print(observations)
    print(getOverallForces(observations))
    print(learner.getWeights())
removeOutliers = np.array(finalSumForces)[np.array(finalSumForces) < 25000]
plt.plot(finalSumForces)
plt.show()
plt.plot(removeOutliers)
plt.show()
finalSumForces = []
print("Starting test using policy")
for test_rollout in range(5):
    observations, infos = env.reset(options=options)
    while env.agents:
        states = {agent: {'agent': agent, 'observations': observations, 'env': env} for agent in env.agents}
        actions = {agent: learner.getAction(states[agent]) for agent in env.agents}
        observations, rewards, terminations, truncations, infos = env.step(actions)
        nextStates = {agent: {'agent': agent, 'observations': observations, 'env': env} for agent in env.agents}
        for agent in env.agents:
            # learner.update(states[agent], actions[agent], nextStates[agent], rewards[agent])
            pass
    finalSumForces.append(getOverallForces(observations))
    # print(observations)
    print(getOverallForces(observations))
    print(learner.getWeights())
removeOutliers = np.array(finalSumForces)[np.array(finalSumForces) < 25000]
plt.plot(finalSumForces)
plt.show()
plt.plot(removeOutliers)
plt.show()
env.close()
